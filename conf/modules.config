/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    //default: do not publish into the results folder
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: FASTQC_RAW {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/fastqc" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: FASTP {
        ext.args = [
            "-q ${params.fastp_qualified_quality}",
            "--cut_front",
            "--cut_tail",
            "--cut_mean_quality ${params.fastp_cut_mean_quality}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/fastp/${meta.id}" },
            mode: 'copy',
            pattern: "*.{html,json}"
        ]
    }

    withName: BOWTIE2_PHIX_REMOVAL_ALIGN {
        ext.suffix = "phix_removed"
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/remove_phix" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: BOWTIE2_HOST_REMOVAL_ALIGN {
        ext.suffix = "host_removed"
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/remove_host" },
            mode: 'copy',
            pattern: "*{.log,read_ids.txt}"
        ]
    }

    withName: FASTQC_TRIMMED {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.trimmed" }
        publishDir = [
            path: { "${params.outdir}/QC_shortreads/fastqc" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    withName: NANOLYSE {
        publishDir = [
            path: { "${params.outdir}/QC_longreads/NanoLyse" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: NANOPLOT_RAW {
        ext.suffix = 'raw'
        publishDir = [
            path: { "${params.outdir}/QC_longreads/NanoPlot/${meta.id}" },
            mode: 'copy',
            pattern: "*.{png,html,txt}"
        ]
    }

    withName: NANOPLOT_FILTERED {
        ext.suffix = 'filtered'
        publishDir = [
            path: { "${params.outdir}/QC_longreads/NanoPlot/${meta.id}" },
            mode: 'copy',
            pattern: "*.{png,html,txt}"
        ]
    }

    withName: CENTRIFUGE {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/centrifuge/${meta.id}" },
            mode: 'copy',
            pattern: "*.txt"
        ]
    }

    withName: KRAKEN2 {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/Taxonomy/kraken2/${meta.id}" },
            mode: 'copy',
            pattern: "*.txt"
        ]
    }

    withName: KRONA {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/${meta.classifier}/${meta.id}" },
            mode: 'copy',
            pattern: "*.html"
        ]
    }

    //pattern: "*.{fa.gz,log}" //'pattern' didnt work, probably because the output is in a folder, solved with 'saveAs'
    withName: MEGAHIT {
        ext.args = params.megahit_options ?: ''
        publishDir = [
            path: { "${params.outdir}/Assembly" },
            mode: 'copy',
            saveAs: {
                filename -> filename.equals('versions.yml') ? null :
                filename.indexOf('.contigs.fa.gz') > 0      ? filename :
                filename.indexOf('.log') > 0                ? filename : null }
        ]
    }

    withName: SPADES {
        ext.args = params.spades_options ?: ''
        publishDir = [
            path: { "${params.outdir}/Assembly/SPAdes" },
            mode: 'copy',
            pattern: "*.{fasta.gz,gfa.gz,log}"
        ]
    }

    withName: SPADESHYBRID {
        ext.args = params.spades_options ?: ''
        publishDir = [
            path: { "${params.outdir}/Assembly/SPAdesHybrid" },
            mode: 'copy',
            pattern: "*.{fasta.gz,gfa.gz,log}"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/Assembly/${meta.assembler}/QC/${meta.id}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BOWTIE2_ASSEMBLY_ALIGN {
        ext.args = params.bowtie2_mode ? params.bowtie2_mode : params.ancient_dna ? '--very-sensitive-local -N 1' : ''
        publishDir = [
            path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
            mode: 'copy',
            pattern: "*.log"
        ]
    }

    withName: 'MAG_DEPTHS_PLOT|MAG_DEPTHS_SUMMARY|BIN_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning" },
            mode: 'copy',
            pattern: "*.{png,tsv}"
        ]
    }

    withName: BUSCO_DB_PREPARATION {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
            mode: 'copy',
            pattern: "*.tar.gz"
        ]
    }

    withName: 'BUSCO|BUSCO_PLOT' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BUSCO_SAVE_DOWNLOAD {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/BUSCO" },
            mode: 'copy',
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BUSCO_SUMMARY|QUAST_BINS|QUAST_BINS_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CAT_DB_GENERATE {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT" },
            mode: 'copy',
            pattern: "*.tar.gz"
        ]
    }

    withName: CAT {
        publishDir = [
            path: { "${params.outdir}/Taxonomy/CAT/${meta.assembler}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GTDBTK_CLASSIFY {
        ext.args   = "--extension fa"
        publishDir = [
            path: { "${params.outdir}/Taxonomy/GTDB-Tk/${meta.assembler}/${meta.id}" },
            mode: 'copy',
            pattern: "*.{log,tasv,tree.gz,fasta,fasta.gz}"
        ]
    }

    withName: GTDBTK_SUMMARY {
        ext.args   = "--extension fa"
        publishDir = [
            path: { "${params.outdir}/Taxonomy/GTDB-Tk" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PROKKA {
        ext.args   = "--metagenome"
        publishDir = [
            path: { "${params.outdir}/Prokka/${meta.assembler}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MULTIQC {
        ext.args   = ""
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PRODIGAL {
        ext.args   = "-p meta"
        publishDir = [
            path: { "${params.outdir}/Prodigal/${meta.assembler}/${meta.id}" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FREEBAYES {
        ext.args   = "-p ${params.freebayes_ploidy} -q ${params.freebayes_min_basequality} -F ${params.freebayes_minallelefreq}"
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/variant_calling/freebayes" },
            pattern: "*.vcf.gz"
        ]
    }

    withName: BCFTOOLS_VIEW {
        ext.args   = "-v snps,mnps -i 'QUAL>=${params.bcftools_view_high_variant_quality} || (QUAL>=${params.bcftools_view_medium_variant_quality} && FORMAT/AO>=${params.bcftools_view_minimal_allelesupport})'"
        ext.suffix = ".filtered"
        publishDir = [
            path: { "${params.outdir}/Ancient_DNA/variant_calling/filtered" },
            pattern: "*.vcf.gz"
        ]
    }

    withName: BCFTOOLS_CONSENSUS {
        publishDir = [
            path: {"${params.outdir}/Ancient_DNA/variant_calling/consensus" },
            pattern: "*.fa"
        ]
    }

    withName: BCFTOOLS_INDEX {
        ext.args   = "-t"
        publishDir = [
            path: {"${params.outdir}/Ancient_DNA/variant_calling/index" },
            enabled: false
        ]
    }

    withName: PYDAMAGE_ANALYZE {
        publishDir = [
            path: {"${params.outdir}/Ancient_DNA/pydamage/analyze" }
        ]
    }

    withName: PYDAMAGE_FILTER {
        ext.args   = "-t ${params.pydamage_accuracy}"
        publishDir = [
            path: {"${params.outdir}/Ancient_DNA/pydamage/filter" }
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: {"${params.outdir}/Ancient_DNA/samtools/faidx" },
            enabled: false
        ]
    }
    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/" },
            mode: 'copy',
            pattern: '*-depth.txt.gz'
        ]
        ext.prefix = { "${meta.assembler}-${meta.id}-depth" }
    }

    withName: METABAT2_METABAT2 {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/" },
                mode: 'copy',
                pattern: 'bins/*.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" },
                mode: 'copy',
                pattern: '*tooShort.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" },
                mode: 'copy',
                pattern: '*lowDepth.fa.gz'
            ]
        ]
        ext.prefix = { "${meta.assembler}-MetaBAT2-${meta.id}" }
        ext.args = [
            "-m ${params.min_contig_size}",
            "--unbinned",
            "--seed ${params.metabat_rng_seed}"
        ].join(' ').trim()
    }

    withName: MAXBIN2 {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/bins/" },
                mode: 'copy',
                pattern: '*.*[0-9].fasta.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/discarded" },
                mode: 'copy',
                pattern: '*.tooshort.gz'
            ],
        ]
        ext.prefix = { "${meta.assembler}-MaxBin2-${meta.id}" }
        // if no gene found, will crash so allow ignore so rest of pipeline
        // completes but without MaxBin2 results
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
    }

    withName: SPLIT_FASTA {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned" },
                mode: 'copy',
                pattern: '*.*[0-9].fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" },
                mode: 'copy',
                pattern: '*.pooled.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" },
                mode: 'copy',
                pattern: '*.remaining.fa.gz'
            ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }

}
